2+2
SD.Fgrp2<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp3<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp4<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp5<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp6<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp7<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp8<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp1<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp2<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp3<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp4<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp5<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp6<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp7<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp8<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp9Female.9grp
colnames(Female.8grp)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
SD.Fgrp1<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp1
SD.Fgrp10<- cbind(SD.Fgrp19, SD.Fgrp2<-sample)
SD.Fgrp10<- cbind(SD.Fgrp9, SD.Fgrp2<-sample)
SD.Fgrp9<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp10<- cbind(SD.Fgrp9, SD.Fgrp2<-sample)
SD.Fgrp10
SD.Fgrp10<- cbind(SD.Fgrp9, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)  )
SD.Fgrp10<- cbind(SD.Fgrp9, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)
all<- cbind(SD.Fgrp9, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)
colnames(all)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
all
all<- cbind(SD.Fgrp1, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)
colnames(all)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
all
SD.Fgrp2<-sample(c(0,1),10,replace=T,c(0.28,0.72))
colnames(all)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
all<- cbind(SD.Fgrp1, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)
colnames(all)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
all
sum(SD.Fgrp8)
sum(SD.Fgrp8)/90
sum(SD.Fgrp8)/10
SD.Fgrp1<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp2<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp3<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp4<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp5<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp6<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp7<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp8<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp9<-sample(c(0,1),10,replace=T,c(0.28,0.72))
library(goseq)
install.packages("goseq")
install.packages("GO.db")
library(ggplot2)
install.packages("MASS")
install.packages("phytools")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("qpcR")
install.packages("pmc")
install.packages("reshape")
install.packages("calibrate")
require(phytools)
install.packages("numDeriv")
install.packages("phangorm")
require(phytools)
install.packages("phangorn")
install.packages("geiger")
install.packages("VennDiagram")
install.packages("VennDiagram")
library(VennDiagram)
ratings.budget.matrix <- matrix(c(243, (1064 - 243), (4072 - 243), (58788 - 4072 - 1064 + 243)),
2, 2,
dimnames = list(set=c("low.budget", "not.low.budget"),
class = c("high.rated", "not.high.rated")))
fisher.test(ratings.budget.matrix)
knit(Rcourse2013.rmd)
library(knitr)
knit(Rcourse2013.rmd)
knit("Rcourse2013.rmd")
install.packages("swirl")
library(swirl)
swirl()
5+7
x <-5+7
x
y <- x+3
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
z + 555 +z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z)
info()
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z/mysqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?:
?':'
ls
?':'
?`:`
seq(1, | 20)
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(myseq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
swirl()
library(seqinr)
install.packages(seqinr)
install.packages(seqinr)
install.packages("seqinr")
seqinr
?seqinr
??seqinr
install.packages("scholar")
install.packages("scholar")
library(scholar)
library(Reol)
install.packages("Reol")
library(Reol)
FirstTwo("Galanthus peshmenii A.P.Davis & C.D.Brickell")
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
itagSeqs <- read.DNAStringSet("../SlCDS_ITAG2.3_pseudoGMAP5V61passNoDif.fa")
itagSeqs <- read.DNAStringSet("../Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta")
itagSeqs <- read.DNAStringSet("/Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta")
itagSeqs <- DNAStringSet("/Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta")
itagSeqs <- read.DNAStringSet("/Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta")
itagSeqs <- read.DNAStringSet(/Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta, "fasta")
itagSeqs <- read.DNAStringSet(Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta, "fasta")
itagSeqs <- read.DNAStringSet(ITAG2.4_cds.fasta, "fasta")
itagSeqs <- read.FASTA("ITAG2.4_cds.fasta")
library(Biostrings)
?readFASTA
??readFASTA
itagSeqs <- read.FASTA("ITAG2.4_cds.fasta")
itagSeqs <- read.fasta(file = system.file("ITAG2.4_cds.fasta", package = "seqinr")
d
itagSeqs <- read.fasta(file = system.file("ITAG2.4_cds.fasta", package = "seqinr"))
library(Biostrings)
itagSeqs <- read.FASTA("ITAG2.4_cds.fasta")
itagSeqs <- read.DNAStringSet("ITAG2.4_cds.fasta")
install.packages(c("dynamicTreeCut", "cluster", "flashClust", "Hmisc", "reshape", "foreach", "doParallel") )
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
femData <- read.csv("LiverFemale3600.csv")
library(ggplot2)
library(reshape)
# Variables
n = 2000
f = 100
f = (f/n)
g = 200
r = 10
gd = array(0, dim=c(g,r))
# set first line of array at n*f
gd[1,] = rep(n*f,r)
# loop for r replicates
for(j in 1:r){
# from line 2 of the array until final generation
for(i in 2:g){
gd[i,j] = rbinom(1,n,prob=gd[i-1,j]/n)
}
}
gd = data.frame(gd/n)
head(gd)
head(gd)
#Plot
gd <- melt(gd)
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) + geom_line() + opts(title = "") + xlab("Generations") + ylab("Focal Allele Frequency") + ylim(0,1) + labs(colour = "") + theme(legend.position="none")
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line() +
opts(title = "") +
xlab("Generations") +
ylab("Focal Allele Frequency") +
ylim(0,1) + labs(colour = "")
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line()
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line() +
xlab("Generations") +
ylab("Focal Allele Frequency") +
ylim(0,1) + labs(colour = "")
gd <- melt(gd)
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line() +
xlab("Generations") +
ylab("Focal Allele Frequency") +
labs(colour = "")
head(gd)
gd = data.frame(gd/n)
head(gd)
n = 2000
f = 100
f = (f/n)
g = 200
r = 10
# replication array
# set dimensions of array to be g*r
gd = array(0, dim=c(g,r))
# set first line of array at n*f
gd[1,] = rep(n*f,r)
# loop for r replicates
for(j in 1:r){
# from line 2 of the array until final generation
for(i in 2:g){
# sample from the population with probability
#defined by the value in the previous generation
gd[i,j] = rbinom(1,n,prob=gd[i-1,j]/n)
}
}
# p
gd = data.frame(gd/n)
head(gd)
n = 2000
f = 100
f = (f/n)
g = 400
r = 10
# replication array
# set dimensions of array to be g*r
gd = array(0, dim=c(g,r))
# set first line of array at n*f
gd[1,] = rep(n*f,r)
# loop for r replicates
for(j in 1:r){
# from line 2 of the array until final generation
for(i in 2:g){
# sample from the population with probability
#defined by the value in the previous generation
gd[i,j] = rbinom(1,n,prob=gd[i-1,j]/n)
}
}
# put it in to a dataframe
gd = data.frame(gd/n)
head(gd)
#Plot
gd <- melt(gd)
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line() +
xlab("Generations") +
ylab("Focal Allele Frequency") +
labs(colour = "")
n = 200
f = 100
f = (f/n)
g = 200
r = 10
# replication array
# set dimensions of array to be g*r
gd = array(0, dim=c(g,r))
# set first line of array at n*f
gd[1,] = rep(n*f,r)
# loop for r replicates
for(j in 1:r){
# from line 2 of the array until final generation
for(i in 2:g){
# sample from the population with probability
#defined by the value in the previous generation
gd[i,j] = rbinom(1,n,prob=gd[i-1,j]/n)
}
}
# put it in to a dataframe
gd = data.frame(gd/n)
head(gd)
#Plot
gd <- melt(gd)
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line() +
xlab("Generations") +
ylab("Focal Allele Frequency") +
labs(colour = "")
# Variables
n = 200
f = 100
f = (f/n)
g = 200
r = 20
# replication array
# set dimensions of array to be g*r
gd = array(0, dim=c(g,r))
# set first line of array at n*f
gd[1,] = rep(n*f,r)
# loop for r replicates
for(j in 1:r){
# from line 2 of the array until final generation
for(i in 2:g){
# sample from the population with probability
#defined by the value in the previous generation
gd[i,j] = rbinom(1,n,prob=gd[i-1,j]/n)
}
}
# put it in to a dataframe
gd = data.frame(gd/n)
head(gd)
#Plot
gd <- melt(gd)
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line() +
xlab("Generations") +
ylab("Focal Allele Frequency") +
labs(colour = "")
# Variables
n = 2000
f = 100
f = (f/n)
g = 200
r = 20
# replication array
# set dimensions of array to be g*r
gd = array(0, dim=c(g,r))
# set first line of array at n*f
gd[1,] = rep(n*f,r)
# loop for r replicates
for(j in 1:r){
# from line 2 of the array until final generation
for(i in 2:g){
# sample from the population with probability
#defined by the value in the previous generation
gd[i,j] = rbinom(1,n,prob=gd[i-1,j]/n)
}
}
# put it in to a dataframe
gd = data.frame(gd/n)
head(gd)
#Plot
gd <- melt(gd)
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line() +
xlab("Generations") +
ylab("Focal Allele Frequency") +
labs(colour = "")
n = 4000
f = 100
f = (f/n)
g = 200
r = 20
# replication array
# set dimensions of array to be g*r
gd = array(0, dim=c(g,r))
# set first line of array at n*f
gd[1,] = rep(n*f,r)
# loop for r replicates
for(j in 1:r){
# from line 2 of the array until final generation
for(i in 2:g){
# sample from the population with probability
#defined by the value in the previous generation
gd[i,j] = rbinom(1,n,prob=gd[i-1,j]/n)
}
}
# put it in to a dataframe
gd = data.frame(gd/n)
head(gd)
#Plot
gd <- melt(gd)
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line() +
xlab("Generations") +
ylab("Focal Allele Frequency") +
labs(colour = "")
n = 1000
f = 100
f = (f/n)
g = 200
r = 20
# replication array
# set dimensions of array to be g*r
gd = array(0, dim=c(g,r))
# set first line of array at n*f
gd[1,] = rep(n*f,r)
# loop for r replicates
for(j in 1:r){
# from line 2 of the array until final generation
for(i in 2:g){
# sample from the population with probability
#defined by the value in the previous generation
gd[i,j] = rbinom(1,n,prob=gd[i-1,j]/n)
}
}
# put it in to a dataframe
gd = data.frame(gd/n)
head(gd)
#Plot
gd <- melt(gd)
ggplot(gd, aes(x = rep(c(1:g), r), y = value, colour = variable)) +
geom_line() +
xlab("Generations") +
ylab("Focal Allele Frequency") +
labs(colour = "")
setwd("~/git.repos/dalliance_Drosophila/data")
dm6 <- read.delim("dm6_refGenes.bed",header=F,as.is=T)
head(dm6)
dm6 <- read.delim("dm6_refGenes.bed",header=T,as.is=T)
head(dm6)
summary(dm6)
colnames(dm6)
dm6ColNames <- colnames(dm6)
head dm6$chrom
head dm6[3]
head dm6
dm6 <- read.delim("dm6_refGenes.bed",header=T,as.is=T)
head(dm6)
summary(dm6)
dm6ColNames <- colnames(dm6)
head dm6
head(dm6[3]
)
dm6ColNames
head(dm6)
new_dm6 <- dm6[,c(3,7,8)]
head(new_dm6)
dm6ColNames <- colnames(dm6)
dm6ColNames
new_dm6 <- dm6[,c(3,7,8,9,12,5,6)]
head(new_dm6)
RBG <- data.frame(255,0,0)
new_dm6$RGB <- 255,0,0
new_dm6$RGB <- "255,0,0"
head(new_dm6)
colnames(dm6)
head(dm6)
cbind(new_dm6, dm6[,c(9,10,11)])
new_dm6 <- cbind(new_dm6, dm6[,c(9,10,11)])
colnames(new_dm6)
colnames(new_dm6)
dm6 <- read.delim("dm6_refGenes.bed",header=T,as.is=T)
head(dm6)
summary(dm6)
colnames(dm6)
new_dm6 <- dm6[,c(3,7,8,9,4,12,5,6)]
head(new_dm6)
new_dm6$RGB <- "255,0,0"
new_dm6 <- cbind(new_dm6, dm6[,c(9,10,11)])
colnames(new_dm6)
new_dm6 <- as.matrix(new_dm6)
new_dm6 <- matrix(new_dm6, ncol = ncol(new_dm6), dimnames = NULL)
head(new_dm6)
## Organizing .bed file
dm6 <- read.delim("dm6_refGenes.bed",header=T,as.is=T)
head(dm6)
summary(dm6)
colnames(dm6)
# Bring column three to front
new_dm6 <- dm6[,c(3,7,8,9,4,12,5,6)]
head(new_dm6)
new_dm6$RGB <- "255,0,0"
new_dm6 <- cbind(new_dm6, dm6[,c(9,10,11)])
colnames(new_dm6)
names(new_dm6) <- NULL
head(new_dm6)
dm6 <- read.delim("dm6_refGenes.bed",header=F,as.is=T)
head(dm6)
summary(dm6)
colnames(dm6)
new_dm6 <- [-1,]
new_dm6 <- [c(-1),]
new_dm6 <- dm6[-1,]
head(new_dm6)
new_dm6 <- dm6[,c(3,7,8,9,4,12,5,6)]
head(new_dm6)
new_dm6$RGB <- "255,0,0"
new_dm6 <- cbind(new_dm6, dm6[,c(9,10,11)])
colnames(new_dm6)
names(new_dm6) <- NULL
head(new_dm6)
#remove headers
write.table(new_dm6,"dm6_BED12.bed",col.names=F,row.names=F,sep="\t",quote=F)
head(new_dm6)
dm6 <- read.delim("dm6_refGenes.bed",header=F,as.is=T)
head(dm6)
summary(dm6)
#remove column names
new_dm6 <- dm6[-1,]
head(new_dm6)
new_dm6 <- dm6[,c(3,7,8,9,4,12,5,6)]
head(new_dm6)
head(new_dm6)
dm6 <- read.delim("dm6_refGenes.bed",header=F,as.is=T)
head(dm6)
summary(dm6)
#remove column names
new_dm6 <- dm6[-1,]
head(new_dm6)
head(new_dm6)
new_dm6 <- new_dm6[,c(3,7,8,9,4,12,5,6)]
head(new_dm6)
new_dm6$RGB <- "255,0,0"
new_dm6 <- cbind(new_dm6, dm6[,c(9,10,11)])
head(new_dm6)
write.table(new_dm6,"dm6_BED12.bed",col.names=F,row.names=F,sep="\t",quote=F)
